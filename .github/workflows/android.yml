name: Build & Publish Termux APK

on:
  push:
    tags:
      - v*
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle

    # Этот шаг остается, так как он, видимо, необходим для структуры вашего проекта
    - name: Fix submodule paths (Create symlinks)
      run: |
        SOURCE_PREFAB_JAR="$GITHUB_WORKSPACE/Submodule/AIDE/AIDE-Plus/app_rewrite/libs/prefab-plugin-2.1.0.jar"
        SOURCE_ANDROID_JAR="$GITHUB_WORKSPACE/Submodule/AIDE/AIDE-Plus/app_rewrite/libs/android.jar"
        SYMLINK_DIR_ABSOLUTE="$GITHUB_WORKSPACE/Submodule/AIDE/app_rewrite/libs"
        mkdir -p "$SYMLINK_DIR_ABSOLUTE"
        ln -sfv "$SOURCE_PREFAB_JAR" "$SYMLINK_DIR_ABSOLUTE/prefab-plugin-2.1.0.jar"
        ln -sfv "$SOURCE_ANDROID_JAR" "$SYMLINK_DIR_ABSOLUTE/android.jar"
        echo "Verifying created symlinks:"
        ls -la "$SYMLINK_DIR_ABSOLUTE/"

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # --- НАЧАЛО ИСПРАВЛЕНИЙ ---
    # Этот шаг динамически исправляет файлы Gradle перед сборкой.

    - name: Patch Gradle files
      run: |
        # --- ШАГ 1: Добавляем недостающие зависимости в aaptcompiler ---
        # Это решает проблему "Unresolved reference 'XMLEventReader'"
        AAPT_BUILD_FILE="Submodule/Compiletion/Xml/aaptcompiler/build.gradle.kts"
        echo "--- Patching aaptcompiler dependencies in $AAPT_BUILD_FILE ---"
        
        if [ -f "$AAPT_BUILD_FILE" ]; then
          # Проверяем, что блока dependencies еще нет, чтобы не дублировать
          if ! grep -q "dependencies {" "$AAPT_BUILD_FILE"; then
            echo "Dependencies block not found. Adding it."
            # Добавляем блок dependencies в конец файла
            echo '' >> "$AAPT_BUILD_FILE"
            echo 'dependencies {' >> "$AAPT_BUILD_FILE"
            echo '    implementation("javax.xml.stream:stax-api:1.0-2")' >> "$AAPT_BUILD_FILE"
            echo '    implementation("org.codehaus.woodstox:woodstox-core-asl:4.4.1")' >> "$AAPT_BUILD_FILE"
            echo '}' >> "$AAPT_BUILD_FILE"
            echo "File $AAPT_BUILD_FILE after patching:"
            cat "$AAPT_BUILD_FILE"
          else
            echo "Dependencies block already exists. Skipping patch."
          fi
        else
          echo "ERROR: aaptcompiler build file not found at $AAPT_BUILD_FILE"
          exit 1
        fi

        # --- ШАГ 2: Исключаем конфликтующую зависимость stax2-api из всей сборки ---
        # Это решает основную проблему "Duplicate class"
        ROOT_BUILD_FILE="build.gradle.kts" # Корневой файл сборки
        echo ""
        echo "--- Patching root build file $ROOT_BUILD_FILE to exclude duplicate dependencies ---"

        if [ -f "$ROOT_BUILD_FILE" ]; then
          # Проверяем, что правило исключения еще не добавлено
          if ! grep -q "org.codehaus.woodstox" "$ROOT_BUILD_FILE"; then
            echo "Exclusion rule for stax2-api not found. Adding it."
            # Добавляем глобальное правило в конец корневого build.gradle.kts
            echo '' >> "$ROOT_BUILD_FILE"
            echo '// Exclude stax2-api, as it is already provided by the Kotlin compiler' >> "$ROOT_BUILD_FILE"
            echo 'configurations.all {' >> "$ROOT_BUILD_FILE"
            echo '    resolutionStrategy.eachDependency {' >> "$ROOT_BUILD_FILE"
            echo '        if (requested.group == "org.codehaus.woodstox" && requested.name == "stax2-api") {' >> "$ROOT_BUILD_FILE"
            echo '            useVersion("0")' >> "$ROOT_BUILD_FILE"
            echo '        }' >> "$ROOT_BUILD_FILE"
            echo '    }' >> "$ROOT_BUILD_FILE"
            echo '}' >> "$ROOT_BUILD_FILE"
            echo "File $ROOT_BUILD_FILE after patching:"
            cat "$ROOT_BUILD_FILE"
          else
            echo "Exclusion rule already exists in $ROOT_BUILD_FILE. Skipping patch."
          fi
        else
          echo "WARNING: Root build.gradle.kts not found. The duplicate class error might persist."
        fi
        echo "--- Gradle patching finished ---"

    # --- КОНЕЦ ИСПРАВЛЕНИЙ ---

    - name: Build APK for termux
      run: ./gradlew :app_flavor:termux:assembleRelease --stacktrace

    - name: Get version info
      id: version
      run: |
        VERSION_FILE_PATH="app_flavor/termux/build.gradle"
        VERSION_CANDIDATE=$(grep -m 1 "versionName" "$VERSION_FILE_PATH" | awk '{print $2}' | tr -d '"')
        echo "Extracted VERSION=${VERSION_CANDIDATE}"
        echo "VERSION=${VERSION_CANDIDATE}" >> $GITHUB_ENV
        echo "APK_NAME=AIDE-Plus-Termux-v${VERSION_CANDIDATE}.apk" >> $GITHUB_ENV

    - name: Rename and move APK
      run: |
        mkdir -p build/outputs/apk/
        EXPECTED_APK_PATH="app_flavor/termux/build/outputs/apk/termux/release/app-termux-release.apk"
        if [ -f "$EXPECTED_APK_PATH" ]; then
          mv "$EXPECTED_APK_PATH" "build/outputs/apk/${{ env.APK_NAME }}"
          echo "APK successfully renamed and moved to build/outputs/apk/${{ env.APK_NAME }}"
        else
          echo "ERROR: APK not found at expected location: $EXPECTED_APK_PATH"
          find "$GITHUB_WORKSPACE" -name "*.apk" -ls
          exit 1
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: AIDE-Plus-Termux-APK
        path: build/outputs/apk/${{ env.APK_NAME }}
        
    # Шаги для GitHub Pages остаются без изменений
    - name: Setup GitHub Pages
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-pages-artifact@v3
      with:
        path: build/outputs/apk/

    - name: Deploy to GitHub Pages
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/deploy-pages@v4
