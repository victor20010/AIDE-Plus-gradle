name: Build Debug APK

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle

    # Этот шаг остается для исправления путей в подмодулях
    - name: Fix submodule paths (Create symlinks)
      run: |
        SOURCE_PREFAB_JAR="$GITHUB_WORKSPACE/Submodule/AIDE/AIDE-Plus/app_rewrite/libs/prefab-plugin-2.1.0.jar"
        SOURCE_ANDROID_JAR="$GITHUB_WORKSPACE/Submodule/AIDE/AIDE-Plus/app_rewrite/libs/android.jar"
        SYMLINK_DIR_ABSOLUTE="$GITHUB_WORKSPACE/Submodule/AIDE/app_rewrite/libs"
        mkdir -p "$SYMLINK_DIR_ABSOLUTE"
        ln -sfv "$SOURCE_PREFAB_JAR" "$SYMLINK_DIR_ABSOLUTE/prefab-plugin-2.1.0.jar"
        ln -sfv "$SOURCE_ANDROID_JAR" "$SYMLINK_DIR_ABSOLUTE/android.jar"

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # --- НОВЫЙ ШАГ: СКАЧИВАЕМ ПРОБЛЕМНЫЕ ЗАВИСИМОСТИ ВРУЧНУЮ ---
    - name: Download and cache missing dependencies
      run: |
        echo "Downloading dependencies that fail from JitPack..."
        # Создаем локальную папку для библиотек
        mkdir -p $GITHUB_WORKSPACE/local-libs
        
        # Скачиваем файлы с помощью wget. -T 15 (таймаут 15с), -t 3 (3 попытки)
        wget -T 15 -t 3 https://jitpack.io/com/github/promeg/tinypinyin/2.0.3/tinypinyin-2.0.3.jar -O $GITHUB_WORKSPACE/local-libs/tinypinyin-2.0.3.jar
        wget -T 15 -t 3 https://jitpack.io/com/github/promeg/tinypinyin-lexicons-java-cncity/2.0.3/tinypinyin-lexicons-java-cncity-2.0.3.jar -O $GITHUB_WORKSPACE/local-libs/tinypinyin-lexicons-java-cncity-2.0.3.jar
        
        echo "Local libs content:"
        ls -la $GITHUB_WORKSPACE/local-libs

    # --- ШАГ ИЗМЕНЕНИЯ GRADLE ФАЙЛОВ ---
    - name: Patch Gradle files for local dependencies
      run: |
        # 1. Исправляем конфликт stax2-api
        ROOT_BUILD_FILE="build.gradle.kts"
        if ! grep -q "org.codehaus.woodstox" "$ROOT_BUILD_FILE"; then
            echo "Adding exclusion rule for stax2-api..."
            echo '' >> "$ROOT_BUILD_FILE"
            echo 'configurations.all { resolutionStrategy.eachDependency { if (requested.group == "org.codehaus.woodstox" && requested.name == "stax2-api") { useVersion("0") } } }' >> "$ROOT_BUILD_FILE"
        fi
        
        # 2. Указываем модулю app_rewrite использовать скачанные локальные файлы
        APP_REWRITE_BUILD_FILE="Submodule/AIDE/app_rewrite/build.gradle.kts"
        echo "Patching $APP_REWRITE_BUILD_FILE to use local libs..."
        # Добавляем репозиторий flatDir в начало файла
        sed -i '1s;^;repositories {\n    flatDir {\n        dirs(rootProject.file("local-libs"))\n    }\n}\n;' "$APP_REWRITE_BUILD_FILE"
        
        # Добавляем зависимости в конец файла
        echo '' >> "$APP_REWRITE_BUILD_FILE"
        echo 'dependencies { implementation(group = "com.github.promeg", name = "tinypinyin", version = "2.0.3") }' >> "$APP_REWRITE_BUILD_FILE"
        echo 'dependencies { implementation(group = "com.github.promeg", name = "tinypinyin-lexicons-java-cncity", version = "2.0.3") }' >> "$APP_REWRITE_BUILD_FILE"
        
        echo "Patched file content:"
        cat "$APP_REWRITE_BUILD_FILE"
        
    # --- ШАГ СБОРКИ В РЕЖИМЕ DEBUG ---
    - name: Build APK (in Debug mode)
      run: ./gradlew :app_flavor:termux:assembleDebug --stacktrace
      
    # ... дальнейшие шаги, например, загрузка артефакта ...
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: AIDE-Plus-Termux-Debug-APK
        path: app_flavor/termux/build/outputs/apk/debug/app-termux-debug.apk
